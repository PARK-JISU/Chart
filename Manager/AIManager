using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Networking;
using System.Linq;
using System;

public class AIManager : Singletone<AIManager>
{
    public void Init()
    {
        //네트워크 체크랑 잡다한거
        //일단 기능만 체크 용으로 만듦
        if(NetManager.Instance.CheckConnectInternet())
        {
            Debug.Log("네트워크 연결 확인");
        }
        else
        {
            Debug.Log("네트워크 연결 안됨");
        }
    }

    public (double, double, double) CalBollingerBands(int period = 20)
    {
        List<CandleData> _data = MarketManager.Instance.GetCandleData();
        List<double> _prices = new List<double>();
        for (int i = 0; i < _data.Count; i++)
        {
            _prices.Add(_data[i].trade_price);
        }


        if (_prices.Count < period) throw new ArgumentException("가격 목록이 기간보다 적습니다.");


        double sma = _prices.Take(period).Average();

        // 2. 표준편차 계산
        double standardDeviation = Math.Sqrt(_prices.Take(period).Select(x => Math.Pow(x - sma, 2)).Average());

        // 3. 상단 밴드, 하단 밴드 계산
        double upperBand = sma + 2 * standardDeviation;
        double lowerBand = sma - 2 * standardDeviation;

        return (upperBand, sma, lowerBand);
    }

    public double CalBollingerBandsWidth(int period = 20)
    {
        var (upperBand, sma, lowerBand) = CalBollingerBands(period);

        // 볼린저 밴드 넓이 계산
        return (upperBand - lowerBand) / sma;
    }

    public double CalMFI(List<Tuple<double, double, double, double>> priceVolumeData, int period = 20)
    {
        if (priceVolumeData.Count < period) throw new ArgumentException("가격 및 거래량 데이터가 부족합니다.");

        double positiveMoneyFlow = 0;
        double negativeMoneyFlow = 0;

        for (int i = 1; i < period; i++)
        {
            double typicalPrice = (priceVolumeData[i].Item1 + priceVolumeData[i].Item2 + priceVolumeData[i].Item3) / 3;
            double moneyFlow = typicalPrice * priceVolumeData[i].Item4;

            if (typicalPrice > (priceVolumeData[i - 1].Item1 + priceVolumeData[i - 1].Item2 + priceVolumeData[i - 1].Item3) / 3)
                positiveMoneyFlow += moneyFlow;
            else
                negativeMoneyFlow += moneyFlow;
        }

        // MFI 계산
        double mfi = 100 - (100 / (1 + (positiveMoneyFlow / negativeMoneyFlow)));

        //백분위가 거꾸로 되있어서 수정함 TEMP
        mfi = 100 - mfi;
        return mfi;
    }

    public double CalculateRSI(List<double> prices, int period = 14)
    {
        if (prices == null || prices.Count <= period)
            throw new ArgumentException("Price list is too short for the specified period.");

        double gain = 0.0;
        double loss = 0.0;

        for (int i = 1; i < period + 1; i++)
        {
            double change = prices[i] - prices[i - 1];
            if (change > 0)
                gain += change;
            else
                loss -= change;
        }

        gain /= period;
        loss /= period;

        if (loss == 0)
            return 100; // 과매수 상태.

        double rs = gain / loss;
        return 100 - (100 / (1 + rs));
    }

    public double CalculateADX(List<double> highPrices, List<double> lowPrices, List<double> closePrices, int period = 14)
    {
        if (highPrices.Count < period || lowPrices.Count < period || closePrices.Count < period)
            throw new ArgumentException("Price lists are too short for the specified period.");

        List<double> plusDM = new List<double>();
        List<double> minusDM = new List<double>();
        List<double> tr = new List<double>();

        for (int i = 1; i < closePrices.Count; i++)
        {
            double upMove = highPrices[i] - highPrices[i - 1];
            double downMove = lowPrices[i - 1] - lowPrices[i];

            plusDM.Add(upMove > downMove && upMove > 0 ? upMove : 0);
            minusDM.Add(downMove > upMove && downMove > 0 ? downMove : 0);

            double trValue = Math.Max(Math.Max(highPrices[i] - lowPrices[i], Math.Abs(highPrices[i] - closePrices[i - 1])), Math.Abs(lowPrices[i] - closePrices[i - 1]));
            tr.Add(trValue);
        }

        double smoothedTR = tr.Take(period).Sum();
        double smoothedPlusDM = plusDM.Take(period).Sum();
        double smoothedMinusDM = minusDM.Take(period).Sum();

        double adx = 0;

        for (int i = period; i < tr.Count; i++)
        {
            smoothedTR = smoothedTR - (smoothedTR / period) + tr[i];
            smoothedPlusDM = smoothedPlusDM - (smoothedPlusDM / period) + plusDM[i];
            smoothedMinusDM = smoothedMinusDM - (smoothedMinusDM / period) + minusDM[i];

            double plusDI = 100 * smoothedPlusDM / smoothedTR;
            double minusDI = 100 * smoothedMinusDM / smoothedTR;
            double dx = 100 * Math.Abs(plusDI - minusDI) / (plusDI + minusDI);

            adx = (adx * (i - period) + dx) / (i - period + 1);
        }

        return adx;
    }

    public  (float[] macd, float[] signal, float[] hist) CalculateMACD(float[] prices, int fastPeriod = 12, int slowPeriod = 26, int signalPeriod = 9)
    {
        float[] macd = new float[prices.Length];
        float[] signal = new float[prices.Length];
        float[] hist = new float[prices.Length];

        // EMA 계산 (지수이동평균)
        float[] fastEma = CalculateEMA(prices, fastPeriod);
        float[] slowEma = CalculateEMA(prices, slowPeriod);

        // MACD 계산
        for (int i = 0; i < prices.Length; i++)
        {
            macd[i] = fastEma[i] - slowEma[i];
        }

        // Signal Line 계산 (MACD의 EMA)
        signal = CalculateEMA(macd, signalPeriod);

        // 히스토그램 계산
        for (int i = 0; i < prices.Length; i++)
        {
            hist[i] = macd[i] - signal[i];
        }

        return (macd, signal, hist);
    }

    public static float[] CalculateEMA(float[] prices, int period)
    {
        float[] ema = new float[prices.Length];
        float multiplier = 2f / (period + 1);

        // 첫 번째 EMA 값은 단순 이동 평균(SMA)으로 계산
        ema[0] = prices.Take(period).Average();

        for (int i = 1; i < prices.Length; i++)
        {
            ema[i] = (prices[i] - ema[i - 1]) * multiplier + ema[i - 1];
        }

        return ema;
    }

    public float[] CalculateStochastic(float[] highs, float[] lows, float[] closes, int kPeriod, int dPeriod)
    {
        float[] k = new float[closes.Length];
        float[] d = new float[closes.Length];

        for (int i = kPeriod - 1; i < closes.Length; i++)
        {
            float highestHigh = highs.Skip(i - kPeriod + 1).Take(kPeriod).Max();
            float lowestLow = lows.Skip(i - kPeriod + 1).Take(kPeriod).Min();

            k[i] = ((closes[i] - lowestLow) / (highestHigh - lowestLow)) * 100;
        }

        // %D (K의 이동평균)
        for (int i = dPeriod - 1; i < k.Length; i++)
        {
            d[i] = k.Skip(i - dPeriod + 1).Take(dPeriod).Average();
        }

        return k; // %K 값만 반환, %D는 추가적으로 필요할 경우 계산 가능합니다.
    }

    bool CheckConsecutiveCandlesWithCumulative(float[] values, int consecutiveCount, float threshold, float cumulativeThreshold)
    {
        int matches = 0;
        float cumulativeSum = 0;

        for (int i = values.Length - 1; i >= 0 && matches < consecutiveCount; i--)
        {
            if (values[i] > threshold)
            {
                matches++;
                cumulativeSum += values[i]; // 누적합 계산
            }
            else
            {
                break;
            }
        }

        // 조건: 연속 횟수와 누적치 둘 다 만족해야 함
        return matches >= consecutiveCount && cumulativeSum >= cumulativeThreshold;
    }

    public string GenerateTradingSignal(
    int rsiPeriod = 14, int adxPeriod = 14,
    int macdFast = 12, int macdSlow = 26, int macdSignal = 9,
    int kPeriod = 14, int dPeriod = 3,
    float macdThreshold = 0.1f, int macdConsecutiveCount = 3, float macdCumulativeThreshold = 0.4f)
    {
        List<CandleData> _curCandleData = MarketManager.Instance.GetCandleData();
        List<Tuple<double, double, double, double>> _curTupleData = MarketManager.Instance.GetTupleData();
        float[] _curPrice = new float[_curCandleData.Count];
        float[] _curHighPrice = new float[_curCandleData.Count];
        float[] _curLowPrice = new float[_curCandleData.Count];
        float[] _curClosePrice = new float[_curCandleData.Count];

        for (int i = 0; i < _curCandleData.Count; i++)
        {
            _curPrice[i] = _curCandleData[i].trade_price;
            _curHighPrice[i] = _curCandleData[i].high_price;
            _curLowPrice[i] = _curCandleData[i].low_price;
            _curClosePrice[i] = _curCandleData[i].trade_price;
        }

        // 1. 볼린저 밴드 계산
        var (upperBand, sma, lowerBand) = CalBollingerBands();
        double bbWidth = CalBollingerBandsWidth();

        // 2. MFI 계산
        double mfi = CalMFI(_curTupleData);

        // 3. RSI 계산
        List<double> closePrices = _curClosePrice.Select(c => (double)c).ToList();
        double rsi = CalculateRSI(closePrices, rsiPeriod);

        // 4. ADX 계산
        List<double> highPrices = _curHighPrice.Select(h => (double)h).ToList();
        List<double> lowPrices = _curLowPrice.Select(l => (double)l).ToList();
        double adx = CalculateADX(highPrices, lowPrices, closePrices, adxPeriod);

        // 5. MACD 계산
        var (macd, signal, hist) = CalculateMACD(_curPrice, macdFast, macdSlow, macdSignal);

        // 6. Stochastic Oscillator 계산
        float[] stochasticK = CalculateStochastic(_curHighPrice, _curLowPrice, _curClosePrice, kPeriod, dPeriod);

        // 7. 연속 및 누적 조건 확인
        bool isMACDValid = CheckConsecutiveCandlesWithCumulative(hist, macdConsecutiveCount, macdThreshold, macdCumulativeThreshold);

        // 8. 현재 가격 및 볼린저 밴드 위치 확인
        double curPrice = _curCandleData[0].trade_price;
        bool isAboveUpperBand = curPrice >= upperBand;
        bool isBelowLowerBand = curPrice <= lowerBand;

        // 9. 조건 조합
        bool isStrongTrend = adx > 25; // 강한 추세
        bool isOversold = rsi < 30 && stochasticK[stochasticK.Length - 1] < 20; // 과매도
        bool isOverbought = rsi > 70 && stochasticK[stochasticK.Length - 1] > 80; // 과매수

        // 10. 최종 신호 생성
        if (isAboveUpperBand)
        {
            if (bbWidth > 0.1f && mfi > 50.0f && isOverbought)
            {
                return "상단 돌파, 과매수 → 매도 신호"; // 상단 돌파, 과매수 → 매도 신호
            }
            else if (bbWidth < 0.1f)
            {
                return "상단 돌파, 낮은 변동성 → 약한 매도 신호"; // 상단 돌파, 낮은 변동성 → 약한 매도 신호
            }
        }
        else if (isBelowLowerBand)
        {
            if (bbWidth > 0.1f && mfi < 50.0f && isOversold)
            {
                return "하단 돌파, 과매도 → 매수 신호"; // 하단 돌파, 과매도 → 매수 신호
            }
            else if (bbWidth < 0.1f)
            {
                return "하단 돌파, 낮은 변동성 → 약한 매수 신호"; // 하단 돌파, 낮은 변동성 → 약한 매수 신호
            }
        }
        else if (curPrice < upperBand && curPrice >= sma)
        {
            return $"Consolidation near Upper Band\nUpper: {upperBand}\nCurPrice: {curPrice}";
        }
        else if (curPrice > lowerBand && curPrice < sma)
        {
            return $"Consolidation near Lower Band\nLower: {lowerBand}\nCurPrice: {curPrice}";
        }

        return "HOLD → 구매,판매 X "; // 신호 없음
    }

    public float CalChangePercentByStandard()
    {
        float _percent = 0;
        List<CandleData> _curCandleData = MarketManager.Instance.GetCandleData();
        CandleData _curData = _curCandleData[0];
        CandleData _preData = _curCandleData[1];

        _percent =((_curData.trade_price - _preData.trade_price) / _preData.trade_price) * 100;
        return _percent;
    }

    //승률 테스트확인플로우
    //여태의 차트에서 언제 언제가 위 방식을사용했을때 이정도의 수익률이었다
}
